// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package main is a generated GoMock package.
package main

import (
	jrpc2 "github.com/bitwurx/jrpc2"
	gomock "github.com/golang/mock/gomock"
	main "main"
	reflect "reflect"
)

// MockGitlabClient is a mock of GitlabClient interface
type MockGitlabClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitlabClientMockRecorder
}

// MockGitlabClientMockRecorder is the mock recorder for MockGitlabClient
type MockGitlabClientMockRecorder struct {
	mock *MockGitlabClient
}

// NewMockGitlabClient creates a new mock instance
func NewMockGitlabClient(ctrl *gomock.Controller) *MockGitlabClient {
	mock := &MockGitlabClient{ctrl: ctrl}
	mock.recorder = &MockGitlabClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGitlabClient) EXPECT() *MockGitlabClientMockRecorder {
	return m.recorder
}

// StartTask mocks base method
func (m *MockGitlabClient) StartTask(arg0 *main.ConcordTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTask", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartTask indicates an expected call of StartTask
func (mr *MockGitlabClientMockRecorder) StartTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTask", reflect.TypeOf((*MockGitlabClient)(nil).StartTask), arg0)
}

// CancelTask mocks base method
func (m *MockGitlabClient) CancelTask(arg0 *main.ConcordTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelTask", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelTask indicates an expected call of CancelTask
func (mr *MockGitlabClientMockRecorder) CancelTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTask", reflect.TypeOf((*MockGitlabClient)(nil).CancelTask), arg0)
}

// MockServiceBroker is a mock of ServiceBroker interface
type MockServiceBroker struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBrokerMockRecorder
}

// MockServiceBrokerMockRecorder is the mock recorder for MockServiceBroker
type MockServiceBrokerMockRecorder struct {
	mock *MockServiceBroker
}

// NewMockServiceBroker creates a new mock instance
func NewMockServiceBroker(ctrl *gomock.Controller) *MockServiceBroker {
	mock := &MockServiceBroker{ctrl: ctrl}
	mock.recorder = &MockServiceBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceBroker) EXPECT() *MockServiceBrokerMockRecorder {
	return m.recorder
}

// Call mocks base method
func (m *MockServiceBroker) Call(arg0, arg1 string, arg2 map[string]interface{}) (interface{}, *jrpc2.ErrorObject) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", arg0, arg1, arg2)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*jrpc2.ErrorObject)
	return ret0, ret1
}

// Call indicates an expected call of Call
func (mr *MockServiceBrokerMockRecorder) Call(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockServiceBroker)(nil).Call), arg0, arg1, arg2)
}
